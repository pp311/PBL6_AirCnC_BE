// <auto-generated />
using System;
using AirCnC.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirCnC.Infrastructure.Migrations
{
    [DbContext(typeof(AirCnCDbContext))]
    [Migration("20230927152424_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirCnC.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("CancellationTicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("CleaningFee")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<int?>("HostPaymentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<double>("PricePerNight")
                        .HasColumnType("float");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SystemFee")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.BookingPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PaymentCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("GuestId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.CancellationPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CancellationPolicies");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.CancellationTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("CancellationReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancellationReasonNote")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<double>("ChargeAmount")
                        .HasColumnType("float");

                    b.Property<int?>("ChargePaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIssuerGuest")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("RefundAmount")
                        .HasColumnType("float");

                    b.Property<int?>("RefundPaymentId")
                        .HasColumnType("int");

                    b.Property<string>("ResolveNote")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TheOtherPartyId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("CancellationTickets");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.CancellationTicketAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CancellationTicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("CancellationTicketId");

                    b.ToTable("CancellationTicketAttachments");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.ChargePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BookingPaymentCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("CancellationTicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PaymentCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CancellationTicketId")
                        .IsUnique();

                    b.HasIndex("HostId");

                    b.ToTable("ChargePayments");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.GuestReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("HostId");

                    b.ToTable("GuestReviews");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Host", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.HostPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("PaymentInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("PaymentInfoId");

                    b.ToTable("HostPayments");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.HostReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("HostId");

                    b.ToTable("HostReviews");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.PaymentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountHolder")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HostId")
                        .IsUnique();

                    b.ToTable("PaymentInfos");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BathroomCount")
                        .HasColumnType("int");

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<int>("CancellationPolicyId")
                        .HasColumnType("int");

                    b.Property<double>("CleaningFee")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(13, 10)
                        .HasColumnType("decimal(13,10)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(13, 10)
                        .HasColumnType("decimal(13,10)");

                    b.Property<int>("MaxAdultCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxChildCount")
                        .HasColumnType("int");

                    b.Property<double>("PricePerNight")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CancellationPolicyId");

                    b.HasIndex("HostId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.PropertyReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("CheckIn")
                        .HasColumnType("int");

                    b.Property<int>("Cleanliness")
                        .HasColumnType("int");

                    b.Property<int>("Communication")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyReviews");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.PropertyUtility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsAirConditioning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBar")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBeachFront")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCamperFriendly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsElevator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGym")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHotWater")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKitchen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLakeView")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLandmarkView")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLaptopFriendlyWorkspace")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMountainView")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRoomService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeaView")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecurityCamera")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpa")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSwimmingPool")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTv")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWheelchairAccessible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWifi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyAmenities");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.RefundPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BookingPaymentCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("CancellationTicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PaymentCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CancellationTicketId")
                        .IsUnique();

                    b.HasIndex("GuestId");

                    b.ToTable("RefundPayments");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("City")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Introduction")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f923ae81-acf5-45d7-a859-882b156844a2",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Phuc Phan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOcHUX0eZK1EIzx9oYtoAoD6dqSr29END2IWiIGvBbKtmbt3s2JSsyTWHP2xJMxqhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d5a193a-df6e-426e-8a3e-b3142a2786a6",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c897223-1119-4348-ad6a-121ca2592eac",
                            Email = "Mia96@hotmail.com",
                            EmailConfirmed = false,
                            FullName = "Rupert Weimann",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIA96@HOTMAIL.COM",
                            NormalizedUserName = "MIA96@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPFMGVIRdSIqNAt3dNxlgqjHRveYjZ5uSrGm54pVQIJizHOYIZTaOxZNWe2cCApDMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c59b70a3-a191-4a98-b95c-30f94690cc4c",
                            TwoFactorEnabled = false,
                            UserName = "Mia96@hotmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26231d5c-9681-4619-b022-db94d59ec70e",
                            Email = "Jettie_Miller96@yahoo.com",
                            EmailConfirmed = false,
                            FullName = "Ida Weimann",
                            LockoutEnabled = false,
                            NormalizedEmail = "JETTIE_MILLER96@YAHOO.COM",
                            NormalizedUserName = "JETTIE_MILLER96@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO3qZixKd1Jco/V0wD3XGLgOlGhwg4QoPEpxttwHyqKzRrf73j2bMhP1ASaJVqQrWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbdde3fd-6236-46fb-8edb-519a01a75d18",
                            TwoFactorEnabled = false,
                            UserName = "Jettie_Miller96@yahoo.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca871dca-4033-49c9-94ac-382b921f2cc9",
                            Email = "Sven_Kuvalis31@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Martine Hoeger",
                            LockoutEnabled = false,
                            NormalizedEmail = "SVEN_KUVALIS31@GMAIL.COM",
                            NormalizedUserName = "SVEN_KUVALIS31@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEICFnfhyPhPn6q8mptzw8sVOJaaG+QqGD4ZOMPCZfsj2ZYZLaJmxaV40APZqBUbouw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "191c49a7-7872-4ffe-beb2-cd6f04bd57b2",
                            TwoFactorEnabled = false,
                            UserName = "Sven_Kuvalis31@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fc0f99a-539f-442e-8de6-7a16b89e2cfe",
                            Email = "Efren_Hills7@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Hassan Erdman",
                            LockoutEnabled = false,
                            NormalizedEmail = "EFREN_HILLS7@GMAIL.COM",
                            NormalizedUserName = "EFREN_HILLS7@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMfPUiNO/hiy2Gq2kUZJ566oE7KsbyRfph9jGcB5TXe/9DHyqZkzEM2Lt5aWZZMEbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "783f6630-e758-489a-b4c3-98a6ea6cee33",
                            TwoFactorEnabled = false,
                            UserName = "Efren_Hills7@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb3818c8-290f-4bd2-affe-891ed23e26ca",
                            Email = "Ethelyn.Nienow68@yahoo.com",
                            EmailConfirmed = false,
                            FullName = "Marcelo Kub",
                            LockoutEnabled = false,
                            NormalizedEmail = "ETHELYN.NIENOW68@YAHOO.COM",
                            NormalizedUserName = "ETHELYN.NIENOW68@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHojSQTfWQT3TZusmf4MbMyK7pM9V9takxAQqvu/3+vKKEPEoWAJ/vgaoyI/tKUDGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1562f18e-1eef-4ab8-9d94-36357a8e8534",
                            TwoFactorEnabled = false,
                            UserName = "Ethelyn.Nienow68@yahoo.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3af1360-91a1-4e7c-8813-76c7b6c2ba44",
                            Email = "Chad_Nienow@hotmail.com",
                            EmailConfirmed = false,
                            FullName = "Pasquale Johns",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHAD_NIENOW@HOTMAIL.COM",
                            NormalizedUserName = "CHAD_NIENOW@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAilvTnOYLFZTd3mHvFVodWi+DguYmwgSUsidzubqRygL+/5YJYed+3PtlnEdlH+HQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68a12ab5-f465-4290-803b-4da477ec5557",
                            TwoFactorEnabled = false,
                            UserName = "Chad_Nienow@hotmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5985a9b9-1388-4e8f-9b84-d082add74348",
                            Email = "Lyric16@yahoo.com",
                            EmailConfirmed = false,
                            FullName = "Philip Satterfield",
                            LockoutEnabled = false,
                            NormalizedEmail = "LYRIC16@YAHOO.COM",
                            NormalizedUserName = "LYRIC16@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP7F2lIBl8h0/G9E7ZpgJ8mtW7E7kFnYWeLmI6LW6VS4Jtzj9x0yYQ83cJkTM/JSqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f39caa3-3897-4272-b6db-0580b617d074",
                            TwoFactorEnabled = false,
                            UserName = "Lyric16@yahoo.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7660448-97f2-44fb-bc1a-c6366e5fdd2b",
                            Email = "Jackeline_Veum53@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Jayson Schroeder",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACKELINE_VEUM53@GMAIL.COM",
                            NormalizedUserName = "JACKELINE_VEUM53@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGvD4T/4htXpunvQEjgyhEEZfNuog9m8EoF1dTpyE8M/VQqnI58ZiSu2V9CA03KvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43998486-58bd-4876-a98c-bfe384a2f5f5",
                            TwoFactorEnabled = false,
                            UserName = "Jackeline_Veum53@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "022497ba-581c-4a20-888e-cc9043d2c523",
                            Email = "Martina66@yahoo.com",
                            EmailConfirmed = false,
                            FullName = "Orlo Herman",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTINA66@YAHOO.COM",
                            NormalizedUserName = "MARTINA66@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPdUMzseVEwhDlzPv664kEEDz/6uKLw7yXN+ErcfXxizFyRV/hkZsv+eFLSpVA43ww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "466e6d9c-7fe1-45a4-83eb-b6c9d13838af",
                            TwoFactorEnabled = false,
                            UserName = "Martina66@yahoo.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5f3ef0e-d054-4a0d-bd84-76225b19e619",
                            Email = "Ezekiel79@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Lourdes Lemke",
                            LockoutEnabled = false,
                            NormalizedEmail = "EZEKIEL79@GMAIL.COM",
                            NormalizedUserName = "EZEKIEL79@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKKgr9RG3GbEXRH60mAbUYE6pfm64ccxGCHABhIdkZb4DjsiSrJFBCLspB+Bn+WRxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b363601a-858a-47bc-ac9b-599935df2e6d",
                            TwoFactorEnabled = false,
                            UserName = "Ezekiel79@gmail.com"
                        });
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Booking", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Guest", "Guest")
                        .WithMany("Bookings")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.Property", "Property")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.BookingPayment", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Booking", "Booking")
                        .WithOne("BookingPayment")
                        .HasForeignKey("AirCnC.Domain.Entities.BookingPayment", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.CancellationTicket", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Booking", "Booking")
                        .WithOne("CancellationTicket")
                        .HasForeignKey("AirCnC.Domain.Entities.CancellationTicket", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.CancellationTicketAttachment", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.CancellationTicket", "CancellationTicket")
                        .WithMany("Attachments")
                        .HasForeignKey("CancellationTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancellationTicket");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.ChargePayment", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.CancellationTicket", "CancellationTicket")
                        .WithOne("ChargePayment")
                        .HasForeignKey("AirCnC.Domain.Entities.ChargePayment", "CancellationTicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.Host", "Host")
                        .WithMany("ChargePayments")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CancellationTicket");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Guest", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.User", "User")
                        .WithOne("Guest")
                        .HasForeignKey("AirCnC.Domain.Entities.Guest", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.GuestReview", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Guest", "Guest")
                        .WithMany("GuestReviews")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.Host", "Host")
                        .WithMany("GuestReviews")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Host", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.User", "User")
                        .WithOne("Host")
                        .HasForeignKey("AirCnC.Domain.Entities.Host", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.HostPayment", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Booking", "Booking")
                        .WithOne("HostPayment")
                        .HasForeignKey("AirCnC.Domain.Entities.HostPayment", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.PaymentInfo", "PaymentInfo")
                        .WithMany("HostPayments")
                        .HasForeignKey("PaymentInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("PaymentInfo");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.HostReview", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Guest", "Guest")
                        .WithMany("HostReviews")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.Host", "Host")
                        .WithMany("HostReviews")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.PaymentInfo", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Host", "Host")
                        .WithOne("PaymentInfo")
                        .HasForeignKey("AirCnC.Domain.Entities.PaymentInfo", "HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Property", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.CancellationPolicy", "CancellationPolicy")
                        .WithMany("Properties")
                        .HasForeignKey("CancellationPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.Host", "Host")
                        .WithMany("Properties")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancellationPolicy");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.PropertyImage", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.PropertyReview", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Guest", "Guest")
                        .WithMany("PropertyReviews")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.Property", "Property")
                        .WithMany("PropertyReviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.PropertyUtility", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Property", "Property")
                        .WithMany("PropertyUtilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.RefundPayment", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.CancellationTicket", "CancellationTicket")
                        .WithOne("RefundPayment")
                        .HasForeignKey("AirCnC.Domain.Entities.RefundPayment", "CancellationTicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.Guest", "Guest")
                        .WithMany("RefundPayments")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CancellationTicket");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Wishlist", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.Guest", "Guest")
                        .WithMany("Wishlists")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.Property", "Property")
                        .WithMany("Wishlists")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirCnC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AirCnC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingPayment");

                    b.Navigation("CancellationTicket");

                    b.Navigation("HostPayment");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.CancellationPolicy", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.CancellationTicket", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ChargePayment");

                    b.Navigation("RefundPayment");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Guest", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("GuestReviews");

                    b.Navigation("HostReviews");

                    b.Navigation("PropertyReviews");

                    b.Navigation("RefundPayments");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Host", b =>
                {
                    b.Navigation("ChargePayments");

                    b.Navigation("GuestReviews");

                    b.Navigation("HostReviews");

                    b.Navigation("PaymentInfo")
                        .IsRequired();

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.PaymentInfo", b =>
                {
                    b.Navigation("HostPayments");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.Property", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PropertyImages");

                    b.Navigation("PropertyReviews");

                    b.Navigation("PropertyUtilities");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("AirCnC.Domain.Entities.User", b =>
                {
                    b.Navigation("Guest")
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
